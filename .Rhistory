# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
# Add National level to state
president_primary_polls$state <- with(data = president_primary_polls, ifelse(is.na(state), "National", state))
# Convert character to factor variables
president_primary_polls <- president_primary_polls %>%
mutate_at(vars(c("pollster", "population", "candidate_name")), factor)
# Replace missing FiveThirtyEight Grade with "No Grade"
president_primary_polls$fte_grade <- with(data = president_primary_polls, ifelse(is.na(fte_grade), "No Grade", fte_grade))
# Reorder FiveThirtyEight Grade
president_primary_polls$fte_grade <- with(data = president_primary_polls, factor(fte_grade, levels = c("A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D-", "No Grade"), ordered = TRUE))
# Reorder population levels
president_primary_polls$population <- with(president_primary_polls, factor(population, levels = c("a", "v", "rv", "lv")))
# Replace notes missing with "No notes"
president_primary_polls$notes <- with(data = president_primary_polls, ifelse(is.na(notes), "No notes", notes))
# Convert dates
president_primary_polls <- president_primary_polls %>%
# Convert poll date variables to date class
mutate_at(c("start_date", "end_date"), mdy) %>%
rowwise() %>%
# Compute median date
mutate(median_date = median(c(start_date, end_date))) %>%
ungroup()
# Convert percentage to proportion
president_primary_polls$ppt <- president_primary_polls$pct / 100
# Some polls have multiple questions; average questions x candidates within each poll
president_primary_polls <- president_primary_polls %>%
# no head to head polls; democratic party polls
filter(notes != "head-to-head poll" & party == "DEM") %>%
group_by(poll_id, candidate_name) %>%
mutate(ppt.avg = mean(ppt, na.rm = TRUE)) %>%
ungroup()
# Compute median_date as a numeric variables
president_primary_polls$median_date_dbl <- as.double(president_primary_polls$median_date)
# Create population rank variable
population_rank <- president_primary_polls %>%
count(poll_id, population) %>%
group_by(poll_id) %>%
mutate(population_rank = row_number()) %>%
ungroup() %>%
select(-n)
# Join with primary poll data
president_primary_polls <- president_primary_polls %>%
full_join(population_rank, by = c("poll_id", "population"))
# Save candidates character vector
candidates <- c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Beto O'Rourke",  "Cory A. Booker", "Elizabeth Warren", "Joseph R. Biden Jr.",  "JuliÃ¡n Castro", "Kamala D. Harris", "Pete Buttigieg", "Tom Steyer",  "Tulsi Gabbard")
# Subset data
polls <- president_primary_polls %>%
# Averaged multiple questions within each poll above; remove duplicates with the filter
filter(!duplicated(cbind(poll_id, candidate_name)))
# Read primary polling average data
primary_pollavrg_nr <- read_xlsx(path = "data/president_primary_pollavrg_name_recognition.xlsx", sheet = "clean", na = "-9999")
# Create political party factor
primary_pollavrg_nr$primary_party <- factor(primary_pollavrg_nr$primary_party)
# and contrasts
contrasts(primary_pollavrg_nr$primary_party) <- cbind(republican = c(-0.5, 0.5))
# Fit model for first half of the primary year (January - June)
glm.fit1 <- glm(nominee ~ poll_avrg1 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
# Fit model for first half of the primary year (January - June)
glm.fit2 <- glm(nominee ~ poll_avrg2 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
polls %>% count(fte_grade)
polls %>% count(fte_grade, pollster) %>% filter(is.na(fte_grade))
polls %>% count(fte_grade, pollster) %>% filter(is.na(fte_grade)) %>% print(n = Inf)
# Application
# Nick Michalak (nickmm@umich.edu)
# Install and/or load packages
# install.packages("tidyverse")
# install.packages("ggrepel")
# install.packages("readxl")
# install.packages("lubridate")
# install.packages("shiny")
# install.packages("kableExtra")
# install.packages("formattable")
# install.packages("scales")
# install.packages("mgcv")
# install.packages("gratia")
# install.packages("effects")
# install.packages("DT")
library(tidyverse)
library(ggrepel)
library(readxl)
library(lubridate)
library(shiny)
library(kableExtra)
library(formattable)
library(scales)
library(mgcv)
library(gratia)
library(effects)
library(DT)
# Use percent from formattable
percent <- formattable::percent
# Logit to probability function
logit2prob <- function(logit) exp(logit) / (1 + exp(logit))
# ggplot2 theme
theme_app <- theme_bw() +
theme(plot.title = element_text(family = "Helvetica", size = rel(1.5), color = "grey20", face = "bold", hjust = 0),
plot.subtitle = element_text(family = "Helvetica", size = rel(1), color = "grey25", face = "bold", hjust = 0),
plot.caption = element_text(family = "Helvetica", size = rel(1.25), color = "grey25"),
axis.title = element_blank(),
axis.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey50", face = "bold"),
legend.title = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.position = "top")
# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
president_primary_polls %>% counfte_grade)
president_primary_polls %>% count(fte_grade)
president_primary_polls %>% count(fte_grade) %>% pull(fte_grade) %>% sort()
president_primary_polls %>% count(fte_grade) %>% pull(fte_grade) %>% sort() %>% dput()
percent <- formattable::percent
# ggplot2 theme
theme_app <- theme_bw() +
theme(plot.title = element_text(family = "Helvetica", size = rel(1.5), color = "grey20", face = "bold", hjust = 0),
plot.subtitle = element_text(family = "Helvetica", size = rel(1), color = "grey25", face = "bold", hjust = 0),
plot.caption = element_text(family = "Helvetica", size = rel(1.25), color = "grey25"),
axis.title = element_blank(),
axis.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey50", face = "bold"),
legend.title = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.position = "top")
# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
# Add National level to state
president_primary_polls$state <- with(data = president_primary_polls, ifelse(is.na(state), "National", state))
# Convert character to factor variables
president_primary_polls <- president_primary_polls %>%
mutate_at(vars(c("pollster", "population", "candidate_name")), factor)
# Replace missing FiveThirtyEight Grade with "No Grade"
president_primary_polls$fte_grade <- with(data = president_primary_polls, ifelse(is.na(fte_grade), "No Grade", fte_grade))
president_primary_polls %>% count(fte_grade) %>% pull(fte_grade) %>% sort() %>% dput()
percent <- formattable::percent
# ggplot2 theme
theme_app <- theme_bw() +
theme(plot.title = element_text(family = "Helvetica", size = rel(1.5), color = "grey20", face = "bold", hjust = 0),
plot.subtitle = element_text(family = "Helvetica", size = rel(1), color = "grey25", face = "bold", hjust = 0),
plot.caption = element_text(family = "Helvetica", size = rel(1.25), color = "grey25"),
axis.title = element_blank(),
axis.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey50", face = "bold"),
legend.title = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.position = "top")
# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
# Add National level to state
president_primary_polls$state <- with(data = president_primary_polls, ifelse(is.na(state), "National", state))
# Convert character to factor variables
president_primary_polls <- president_primary_polls %>%
mutate_at(vars(c("pollster", "population", "candidate_name")), factor)
# Replace missing FiveThirtyEight Grade with "No Grade"
president_primary_polls$fte_grade <- with(data = president_primary_polls, ifelse(is.na(fte_grade), "No Grade", fte_grade))
# Reorder FiveThirtyEight Grade
president_primary_polls$fte_grade <- with(data = president_primary_polls, factor(fte_grade, levels = c("A+", "A", "A-", "A/B", "B+", "B", "B-", "B/C", "C+", "C", "C-", "C/D", "D+", "D", "D-", "No Grade"), ordered = TRUE))
# Reorder population levels
president_primary_polls$population <- with(president_primary_polls, factor(population, levels = c("a", "v", "rv", "lv")))
# Replace notes missing with "No notes"
president_primary_polls$notes <- with(data = president_primary_polls, ifelse(is.na(notes), "No notes", notes))
# Convert dates
president_primary_polls <- president_primary_polls %>%
# Convert poll date variables to date class
mutate_at(c("start_date", "end_date"), mdy) %>%
rowwise() %>%
# Compute median date
mutate(median_date = median(c(start_date, end_date))) %>%
ungroup()
# Convert percentage to proportion
president_primary_polls$ppt <- president_primary_polls$pct / 100
# Some polls have multiple questions; average questions x candidates within each poll
president_primary_polls <- president_primary_polls %>%
# no head to head polls; democratic party polls
filter(notes != "head-to-head poll" & party == "DEM") %>%
group_by(poll_id, candidate_name) %>%
mutate(ppt.avg = mean(ppt, na.rm = TRUE)) %>%
ungroup()
# Compute median_date as a numeric variables
president_primary_polls$median_date_dbl <- as.double(president_primary_polls$median_date)
# Create population rank variable
population_rank <- president_primary_polls %>%
count(poll_id, population) %>%
group_by(poll_id) %>%
mutate(population_rank = row_number()) %>%
ungroup() %>%
select(-n)
# Join with primary poll data
president_primary_polls <- president_primary_polls %>%
full_join(population_rank, by = c("poll_id", "population"))
president_primary_polls %>% count(candidate_name) %>% pull(candidate_name)
sort(c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Beto O'Rourke",  "Cory A. Booker", "Elizabeth Warren", "Joseph R. Biden Jr.",  "JuliÃ¡n Castro", "Kamala D. Harris", "Pete Buttigieg", "Tom Steyer",  "Tulsi Gabbard", "Deval Patrick", "Michael Bloomberg"))
sort(c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Beto O'Rourke",  "Cory A. Booker", "Elizabeth Warren", "Joseph R. Biden Jr.",  "JuliÃ¡n Castro", "Kamala D. Harris", "Pete Buttigieg", "Tom Steyer",  "Tulsi Gabbard", "Deval Patrick", "Michael Bloomberg")) %>% dput()
runApp()
rsconnect::deployApp()
shiny::runApp()
library(tidyverse)
library(ggrepel)
library(readxl)
library(lubridate)
library(shiny)
library(kableExtra)
library(formattable)
library(scales)
library(mgcv)
library(gratia)
library(effects)
library(DT)
library(tidyverse)
library(ggrepel)
library(readxl)
library(lubridate)
library(shiny)
library(kableExtra)
library(formattable)
library(scales)
library(mgcv)
library(gratia)
library(effects)
library(DT)
# Use percent from formattable
percent <- formattable::percent
# ggplot2 theme
theme_app <- theme_bw() +
theme(plot.title = element_text(family = "Helvetica", size = rel(1.5), color = "grey20", face = "bold", hjust = 0),
plot.subtitle = element_text(family = "Helvetica", size = rel(1), color = "grey25", face = "bold", hjust = 0),
plot.caption = element_text(family = "Helvetica", size = rel(1.25), color = "grey25"),
axis.title = element_blank(),
axis.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey50", face = "bold"),
legend.title = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.position = "top")
# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
# Add National level to state
president_primary_polls$state <- with(data = president_primary_polls, ifelse(is.na(state), "National", state))
# Convert character to factor variables
president_primary_polls <- president_primary_polls %>%
mutate_at(vars(c("pollster", "population", "candidate_name")), factor)
# Replace missing FiveThirtyEight Grade with "No Grade"
president_primary_polls$fte_grade <- with(data = president_primary_polls, ifelse(is.na(fte_grade), "No Grade", fte_grade))
# Reorder FiveThirtyEight Grade
president_primary_polls$fte_grade <- with(data = president_primary_polls, factor(fte_grade, levels = c("A+", "A", "A-", "A/B", "B+", "B", "B-", "B/C", "C+", "C", "C-", "C/D", "D+", "D", "D-", "No Grade"), ordered = TRUE))
# Reorder population levels
president_primary_polls$population <- with(president_primary_polls, factor(population, levels = c("a", "v", "rv", "lv")))
# Replace notes missing with "No notes"
president_primary_polls$notes <- with(data = president_primary_polls, ifelse(is.na(notes), "No notes", notes))
# Convert dates
president_primary_polls <- president_primary_polls %>%
# Convert poll date variables to date class
mutate_at(c("start_date", "end_date"), mdy) %>%
rowwise() %>%
# Compute median date
mutate(median_date = median(c(start_date, end_date))) %>%
ungroup()
# Convert percentage to proportion
president_primary_polls$ppt <- president_primary_polls$pct / 100
# Some polls have multiple questions; average questions x candidates within each poll
president_primary_polls <- president_primary_polls %>%
# no head to head polls; democratic party polls
filter(notes != "head-to-head poll" & party == "DEM") %>%
group_by(poll_id, candidate_name) %>%
mutate(ppt.avg = mean(ppt, na.rm = TRUE)) %>%
ungroup()
# Compute median_date as a numeric variables
president_primary_polls$median_date_dbl <- as.double(president_primary_polls$median_date)
# Create population rank variable
population_rank <- president_primary_polls %>%
count(poll_id, population) %>%
group_by(poll_id) %>%
mutate(population_rank = row_number()) %>%
ungroup() %>%
select(-n)
# Join with primary poll data
president_primary_polls <- president_primary_polls %>%
full_join(population_rank, by = c("poll_id", "population"))
# Save candidates character vector
candidates <- c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Beto O'Rourke", "Cory A. Booker", "Deval Patrick", "Elizabeth Warren", "Joseph R. Biden Jr.", "JuliÃ¡n Castro", "Kamala D. Harris", "Michael Bloomberg", "Pete Buttigieg", "Tom Steyer", "Tulsi Gabbard")
# Subset data
polls <- president_primary_polls %>%
# Averaged multiple questions within each poll above; remove duplicates with the filter
filter(!duplicated(cbind(poll_id, candidate_name)))
# Read primary polling average data
primary_pollavrg_nr <- read_xlsx(path = "data/president_primary_pollavrg_name_recognition.xlsx", sheet = "clean", na = "-9999")
# Create political party factor
primary_pollavrg_nr$primary_party <- factor(primary_pollavrg_nr$primary_party)
# and contrasts
contrasts(primary_pollavrg_nr$primary_party) <- cbind(republican = c(-0.5, 0.5))
# Fit model for first half of the primary year (January - June)
glm.fit1 <- glm(nominee ~ poll_avrg1 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
# Fit model for first half of the primary year (January - June)
glm.fit2 <- glm(nominee ~ poll_avrg2 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
president_primary_polls %>% count(pollster, poll_id)
president_primary_polls %>% count(pollster, poll_id, candidate_name)
president_primary_polls %>% count(pollster, poll_id, candidate_name) %>% print(n = Inf)
runApp()
runApp()
rsconnect::deployApp()
runApp('~/Desktop/democratic_primary_polls2020')
library(tidyverse)
library(ggrepel)
library(readxl)
library(lubridate)
library(shiny)
library(kableExtra)
library(formattable)
library(scales)
library(mgcv)
library(gratia)
library(effects)
library(DT)
# Use percent from formattable
percent <- formattable::percent
# ggplot2 theme
theme_app <- theme_bw() +
theme(plot.title = element_text(family = "Helvetica", size = rel(1.5), color = "grey20", face = "bold", hjust = 0),
plot.subtitle = element_text(family = "Helvetica", size = rel(1), color = "grey25", face = "bold", hjust = 0),
plot.caption = element_text(family = "Helvetica", size = rel(1.25), color = "grey25"),
axis.title = element_blank(),
axis.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey50", face = "bold"),
legend.title = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.position = "top")
# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
# Add National level to state
president_primary_polls$state <- with(data = president_primary_polls, ifelse(is.na(state), "National", state))
# Convert character to factor variables
president_primary_polls <- president_primary_polls %>%
mutate_at(vars(c("pollster", "population", "candidate_name")), factor)
# Replace missing FiveThirtyEight Grade with "No Grade"
president_primary_polls$fte_grade <- with(data = president_primary_polls, ifelse(is.na(fte_grade), "No Grade", fte_grade))
# Reorder FiveThirtyEight Grade
president_primary_polls$fte_grade <- with(data = president_primary_polls, factor(fte_grade, levels = c("A+", "A", "A-", "A/B", "B+", "B", "B-", "B/C", "C+", "C", "C-", "C/D", "D+", "D", "D-", "No Grade"), ordered = TRUE))
# Reorder population levels
president_primary_polls$population <- with(president_primary_polls, factor(population, levels = c("a", "v", "rv", "lv")))
# Replace notes missing with "No notes"
president_primary_polls$notes <- with(data = president_primary_polls, ifelse(is.na(notes), "No notes", notes))
# Convert dates
president_primary_polls <- president_primary_polls %>%
# Convert poll date variables to date class
mutate_at(c("start_date", "end_date"), mdy) %>%
rowwise() %>%
# Compute median date
mutate(median_date = median(c(start_date, end_date))) %>%
ungroup()
# Convert percentage to proportion
president_primary_polls$ppt <- president_primary_polls$pct / 100
# Some polls have multiple questions; average questions x candidates within each poll
president_primary_polls <- president_primary_polls %>%
# no head to head polls; democratic party polls
filter(notes != "head-to-head poll" & party == "DEM") %>%
group_by(poll_id, candidate_name) %>%
mutate(ppt.avg = mean(ppt, na.rm = TRUE)) %>%
ungroup()
# Compute median_date as a numeric variables
president_primary_polls$median_date_dbl <- as.double(president_primary_polls$median_date)
# Create population rank variable
population_rank <- president_primary_polls %>%
count(poll_id, population) %>%
group_by(poll_id) %>%
mutate(population_rank = row_number()) %>%
ungroup() %>%
select(-n)
# Join with primary poll data
president_primary_polls <- president_primary_polls %>%
full_join(population_rank, by = c("poll_id", "population"))
# Save candidates character vector
candidates <- c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Beto O'Rourke", "Cory A. Booker", "Deval Patrick", "Elizabeth Warren", "Joseph R. Biden Jr.", "JuliÃ¡n Castro", "Kamala D. Harris", "Michael Bloomberg", "Pete Buttigieg", "Tom Steyer", "Tulsi Gabbard")
# Subset data
polls <- president_primary_polls %>%
# Averaged multiple questions within each poll above; remove duplicates with the filter
filter(!duplicated(cbind(poll_id, candidate_name)))
# Read primary polling average data
primary_pollavrg_nr <- read_xlsx(path = "data/president_primary_pollavrg_name_recognition.xlsx", sheet = "clean", na = "-9999")
# Create political party factor
primary_pollavrg_nr$primary_party <- factor(primary_pollavrg_nr$primary_party)
# and contrasts
contrasts(primary_pollavrg_nr$primary_party) <- cbind(republican = c(-0.5, 0.5))
# Fit model for first half of the primary year (January - June)
glm.fit1 <- glm(nominee ~ poll_avrg1 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
# Fit model for first half of the primary year (January - June)
glm.fit2 <- glm(nominee ~ poll_avrg2 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
president_primary_polls$tracking %>% table()
?shiny::checkboxInput()
!TRUE
TRUE == !FALSE
runApp()
rsconnect::deployApp()
president_primary_polls %>% count(pollster, tracking) %>% filter(tracking == TRUE)
president_primary_polls %>% glimpse()
?checkboxInput
c(T, F) == c(TRUE, NULL)
c(T, F) == c(TRUE, NA)
c(T, F) == c(NULL, NULL)
T == NULL
T == NA
tibble(x = 1:2, remove = c(TRUE, FALSE)) %>% filter(remove == NULL)
tibble(x = 1:2, remove = c(TRUE, FALSE)) %>% filter(remove == NA)
tibble(x = 1:2, remove = c(TRUE, FALSE)) %>% filter(remove == NULL)
tibble(x = 1:2, remove = c(TRUE, FALSE)) %>% filter(remove %in% NULL)
ifelse(TRUE, c(TRUE, FALSE))
ifelse(TRUE, c(FALSE, FALSE))
runApp()
with(president_primary_polls, interaction(pollster, tracking))
runApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
# Application
# Nick Michalak (nickmm@umich.edu)
# Install and/or load packages
# install.packages("tidyverse")
# install.packages("ggrepel")
# install.packages("readxl")
# install.packages("lubridate")
# install.packages("shiny")
# install.packages("kableExtra")
# install.packages("formattable")
# install.packages("scales")
# install.packages("mgcv")
# install.packages("gratia")
# install.packages("effects")
# install.packages("DT")
library(tidyverse)
library(ggrepel)
library(readxl)
library(lubridate)
library(shiny)
library(kableExtra)
library(formattable)
library(scales)
library(mgcv)
library(gratia)
library(effects)
library(DT)
# Use percent from formattable
percent <- formattable::percent
# ggplot2 theme
theme_app <- theme_grey() +
theme(plot.title = element_text(family = "Helvetica", size = rel(1.5), color = "grey20", face = "bold", hjust = 0),
plot.subtitle = element_text(family = "Helvetica", size = rel(1), color = "grey25", face = "bold", hjust = 0),
plot.caption = element_text(family = "Helvetica", size = rel(1.25), color = "grey25"),
axis.title = element_blank(),
axis.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey50", face = "bold"),
legend.title = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.text = element_text(family = "Helvetica", size = rel(1.25), color = "grey25", face = "bold"),
legend.position = "top")
# Read primary polling data from fivethirtyeight.com
president_primary_polls <- read_csv(file = "https://projects.fivethirtyeight.com/polls-page/president_primary_polls.csv")
# Add National level to state
president_primary_polls$state <- with(data = president_primary_polls, ifelse(is.na(state), "National", state))
# Convert character to factor variables
president_primary_polls <- president_primary_polls %>%
mutate_at(vars(c("pollster", "population", "candidate_name")), factor)
# Replace missing FiveThirtyEight Grade with "No Grade"
president_primary_polls$fte_grade <- with(data = president_primary_polls, ifelse(is.na(fte_grade), "No Grade", fte_grade))
# Reorder FiveThirtyEight Grade
president_primary_polls$fte_grade <- with(data = president_primary_polls, factor(fte_grade, levels = c("A+", "A", "A-", "A/B", "B+", "B", "B-", "B/C", "C+", "C", "C-", "C/D", "D+", "D", "D-", "No Grade"), ordered = TRUE))
# Reorder population levels
president_primary_polls$population <- with(president_primary_polls, factor(population, levels = c("a", "v", "rv", "lv")))
# Replace notes missing with "No notes"
president_primary_polls$notes <- with(data = president_primary_polls, ifelse(is.na(notes), "No notes", notes))
# Convert dates
president_primary_polls <- president_primary_polls %>%
# Convert poll date variables to date class
mutate_at(c("start_date", "end_date"), mdy) %>%
rowwise() %>%
# Compute median date
mutate(median_date = median(c(start_date, end_date))) %>%
ungroup()
# Convert percentage to proportion
president_primary_polls$ppt <- president_primary_polls$pct / 100
# Some polls have multiple questions; average questions x candidates within each poll
president_primary_polls <- president_primary_polls %>%
# no head to head polls; democratic party polls
filter(notes != "head-to-head poll" & party == "DEM") %>%
group_by(poll_id, candidate_name) %>%
mutate(ppt.avg = mean(ppt, na.rm = TRUE)) %>%
ungroup()
# Compute median_date as a numeric variables
president_primary_polls$median_date_dbl <- as.double(president_primary_polls$median_date)
# Create population rank variable
population_rank <- president_primary_polls %>%
count(poll_id, population) %>%
group_by(poll_id) %>%
mutate(population_rank = row_number()) %>%
ungroup() %>%
select(-n)
# Join with primary poll data
president_primary_polls <- president_primary_polls %>%
full_join(population_rank, by = c("poll_id", "population"))
# Save candidates character vector
candidates <- c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Beto O'Rourke", "Cory A. Booker", "Deval Patrick", "Elizabeth Warren", "Joseph R. Biden Jr.", "JuliÃ¡n Castro", "Kamala D. Harris", "Michael Bloomberg", "Pete Buttigieg", "Tom Steyer", "Tulsi Gabbard")
# Subset data
polls <- president_primary_polls %>%
# Averaged multiple questions within each poll above; remove duplicates with the filter
filter(!duplicated(cbind(poll_id, candidate_name)))
# Read primary polling average data
primary_pollavrg_nr <- read_xlsx(path = "data/president_primary_pollavrg_name_recognition.xlsx", sheet = "clean", na = "-9999")
# Create political party factor
primary_pollavrg_nr$primary_party <- factor(primary_pollavrg_nr$primary_party)
# and contrasts
contrasts(primary_pollavrg_nr$primary_party) <- cbind(republican = c(-0.5, 0.5))
# Fit model for first half of the primary year (January - June)
glm.fit1 <- glm(nominee ~ poll_avrg1 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
# Fit model for first half of the primary year (January - June)
glm.fit2 <- glm(nominee ~ poll_avrg2 * primary_party, family = binomial(link = "logit"), data = primary_pollavrg_nr)
show_col(c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#4E79A7", "#F28E2B", "#E15759", "#76B7B2", "#59A14F", "#EDC948", "#B07AA1", "#FF9DA7", "#9C755F", "#BAB0AC"))
runApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
runApp()
rsconnect::deployApp()
